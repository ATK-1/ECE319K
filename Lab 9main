// Lab9Main.c
// Runs on MSPM0G3507
// Lab 9 ECE319K
// Ashton Knecht and Luis Aceves
// Last Modified: 12/31/2023

#include <stdio.h>
#include <stdint.h>
#include <ti/devices/msp/msp.h>
#include "../inc/ST7735.h"
#include "../inc/Clock.h"
#include "../inc/LaunchPad.h"
#include "../inc/TExaS.h"
#include "../inc/Timer.h"
#include "../inc/ADC1.h"
#include "../inc/DAC5.h"
#include "SmallFont.h"
#include "LED.h"
#include "Switch.h"
#include "Sound.h"
#include "images/images.h"
#include "List.h"
#include "UART1.h"
#include "UART2.h"
#include "../inc/FIFO1.h"






// ****note to ECE319K students****
// the data sheet says the ADC does not work when clock is 80 MHz
// however, the ADC seems to work on my boards at 80 MHz
// I suggest you try 80MHz, but if it doesn't work, switch to 40MHz


list_t Deck_List;
list_t User_List;
list_t Opp_List;

list_node_t ListNodes[112];
card_t Cards[112];

color_t Play_Color;
value_t Play_Value;

uint8_t Page;

uint32_t Error=0; // If this is high then we have some type of error
uint32_t Semiphore=0;

const char soundCardDown [3540] = {16,16,16,16,15,15,15,15,15,16,16,15,16,16,16,15,16,16,16,16,16,16,16,16,15,15,15,15,16,16,16,16,16,16,16,15,16,16,16,16,16,16,15,16,16,16,16,16,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,16,15,15,15,16,15,16,16,16,16,15,15,15,16,16,16,16,16,16,16,15,15,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,15,15,16,16,16,16,15,15,15,15,15,15,16,16,16,16,16,15,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,15,15,15,16,16,16,16,15,15,15,15,15,15,15,15,15,15,15,15,16,15,15,15,15,15,15,16,15,15,15,15,15,15,15,16,16,15,15,15,16,15,15,15,16,16,16,16,16,15,15,15,15,15,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,15,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,15,15,15,15,15,15,15,15,16,16,16,15,15,15,16,16,16,16,16,16,16,16,16,16,16,16,16,15,15,16,16,16,16,16,15,15,15,15,15,16,16,16,16,16,16,16,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,16,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,16,16,16,16,15,15,15,16,16,16,16,16,15,15,15,16,16,15,15,16,16,16,15,15,15,15,16,16,15,15,15,15,16,16,16,15,15,16,16,16,15,15,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,15,16,16,16,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,15,15,15,16,16,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,16,16,15,15,15,15,15,15,15,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,15,15,15,15,15,16,16,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,16,15,15,15,15,15,16,15,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,15,15,15,15,15,15,15,15,15,15,15,15,15,16,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,16,15,16,16,15,16,16,16,16,16,15,15,15,15,15,15,15,15,15,15,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,15,15,15,15,15,15,15,15,16,15,15,15,15,16,16,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,16,16,16,16,16,15,15,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,15,15,15,16,16,16,16,16,16,16,16,16,16,16,16,16,16,15,15,15,15,15,16,16,15,15,15,16,16,15,15,15,15,15,15,15,15,16,16,16,16,16,16,16,16,15,15,15,15,15,15,15,15,15,15,15,16,16,15,15,15,15,15,15,15,15,16,16,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,16,16,16,16,16,16,15,15,15,16,16,16,16,15,15,15,15,15,15,15,15,16,16,16,15,15,15,15,15,15,15,15,15,15,15,15,16,16,16,15,15,15,15,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,15,15,15,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,15,15,15,15,16,16,16,16,16,16,16,16,15,15,15,16,16,16,16,15,15,16,16,16,15,16,16,15,15,16,15,15,15,15,15,16,16,16,16,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,16,16,16,15,15,15,15,15,15,15,15,15,15,15,15,15,16,15,15,15,15,15,15,15,15,16,16,16,16,16,16,15,15,16,16,16,15,15,16,16,16,16,16,15,15,15,15,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,15,15,15,16,16,16,16,16,16,15,16,16,16,16,16,16,16,16,15,15,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,15,15,15,16,16,15,15,16,16,16,16,16,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,16,16,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,15,15,15,15,15,15,16,16,16,16,16,15,15,15,15,16,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,16,16,16,16,16,16,16,16,16,15,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,15,16,16,16,16,16,16,16,16,15,15,15,15,15,16,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,16,15,15,15,15,15,15,15,15,15,15,15,15,15,15,16,15,15,15,15,15,16,16,16,15,16,16,16,15,15,15,16,15,16,16,15,15,15,15,15,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,15,15,16,16,15,16,16,16,16,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,16,16,15,15,15,15,15,16,16,16,16,16,16,15,16,16,16,16,16,16,16,16,16,16,16,16,16,16,17,17,17,16,16,16,16,16,16,17,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,15,15,15,15,15,15,15,15,15,15,15,14,14,15,15,15,15,15,14,14,14,14,15,15,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,15,15,15,15,15,15,15,15,15,15,16,16,16,16,16,16,16,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,16,17,17,17,17,17,17,17,17,17,17,17,17,16,16,16,17,17,17,16,16,16,16,16,16,16,16,16,16,15,15,15,15,15,15,15,15,15,15,15,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,13,13,14,14,13,13,13,13,13,13,14,14,14,14,14,14,14,14,14,14,14,15,15,15,15,15,15,15,15,15,15,16,15,15,16,16,16,16,16,16,16,16,16,17,17,17,17,17,17,17,17,17,17,17,18,18,18,17,17,17,18,18,18,17,17,17,17,17,17,18,18,18,18,17,18,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,16,16,16,16,16,16,16,16,16,15,15,15,15,15,15,15,15,15,14,14,14,14,15,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,13,13,13,13,13,13,13,13,13,13,13,14,14,14,14,14,14,15,14,14,15,15,15,15,15,15,15,15,16,16,16,16,16,16,16,16,16,16,16,17,17,16,17,17,17,17,17,17,17,17,17,17,17,16,16,16,16,17,17,16,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,18,18,17,18,18,17,17,17,17,17,17,17,17,17,17,16,16,16,16,16,16,16,16,16,16,16,15,15,15,15,15,15,15,15,15,14,14,14,14,14,14,14,14,13,13,13,13,13,13,13,12,13,13,13,13,13,13,13,13,13,14,14,14,14,14,14,14,15,15,15,15,15,15,15,15,15,16,16,16,16,16,16,16,16,16,17,17,17,17,17,16,16,17,17,17,17,16,17,17,16,17,17,17,17,17,17,17,17,17,17,17,17,18,18,18,17,17,18,17,17,17,17,17,17,17,17,17,17,17,16,16,16,16,16,15,15,16,15,15,15,15,15,15,15,16,16,15,15,15,15,15,15,15,15,15,14,14,14,14,14,14,14,14,14,13,13,13,13,13,13,14,14,13,13,13,13,13,13,14,14,14,14,14,14,14,14,14,14,14,15,15,15,15,16,16,15,15,16,16,16,16,16,16,16,17,17,17,17,17,17,17,16,16,16,16,17,16,16,17,16,16,17,17,17,17,17,17,17,17,18,17,17,18,18,18,18,18,18,18,18,18,18,17,17,17,17,17,17,17,17,17,17,16,16,16,16,16,16,16,15,15,15,14,14,14,14,14,14,14,14,14,14,14,13,13,13,13,13,14,14,14,13,13,13,13,13,13,13,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,16,16,16,16,16,17,17,17,17,17,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,17,17,17,17,17,17,16,16,16,15,15,15,15,15,15,15,15,15,14,15,14,14,14,14,14,14,14,14,14,14,14,14,14,14,15,15,15,15,15,14,14,14,14,13,14,14,14,14,13,13,14,14,14,14,14,14,14,14,14,14,14,14,14,15,15,15,15,16,16,16,16,16,16,16,16,16,16,16,17,17,17,17,17,17,17,17,17,17,17,17,18,17,17,17,17,17,18,18,18,18,18,17,17,17,17,17,17,17,16,16,16,16,16,16,16,16,15,16,16,16,16,15,15,15,15,15,15,16,15,15,15,15,15,15,14,14,15,15,15,15,16,15,15,14,14,14,14,14,13,13,14,14,14,14,15,15,15,15,15,15,15,15,15,15,15,15,16,15,15,16,15,15,15,15,15,15,16,16,16,16,15,16,16,16,17,17,17,17,16,16,16,16,16,16,17,17,17,17,17,16,17,17,17,17,17,16,16,16,16,15,15,15,15,15,14,14,15,14,15,16,15,15,15,15,15,15,15,15,14,14,14,14,14,14,14,15,14,14,14,15,14,14,14,14,14,15,15,14,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,16,16,15,16,16,16,16,17,17,17,18,17,17,17,17,17,17,17,17,17,17,17,16,17,17,17,18,18,17,18,18,18,17,18,19,19,18,18,18,18,18,18,18,18,18,18,18,17,17,17,17,17,17,17,16,16,15,15,15,15,15,15,14,14,14,14,14,14,14,15,15,14,13,13,13,13,13,13,14,13,13,13,13,12,12,12,13,13,13,13,13,12,12,12,12,12,13,13,12,13,13,13,13,13,14,14,14,14,14,14,14,14,15,15,15,15,15,15,16,15,15,15,16,16,16,16,16,16,17,17,17,17,17,17,18,18,18,19};

// Function Declarations
void discard(struct list_node* removed_node);
void draw(struct list* player_hand, struct list_node* card_node);
void draw_seven(void);
uint32_t random_index(void);
list_node_t* traverse_index(list_t* deck, uint32_t index);
void read_input(void);
void update_pages(void);
void display_hand(void);
void display_card(card_t* card);

//extern void wait(int buscycles);

uint32_t *soundPointer;





void PLL_Init(void){ // set phase lock loop (PLL)
  // Clock_Init40MHz(); // run this line for 40MHz
  Clock_Init80MHz(0);   // run this line for 80MHz
}

uint32_t M=1;
uint32_t Random32(void){
  M = 1664525*M+1013904223;
  return M;
}
uint32_t Random(uint32_t n){
  return (Random32()>>16)%n;
}


// games  engine runs at 30Hz
void TIMG12_IRQHandler(void){uint32_t pos,msg;
  if((TIMG12->CPU_INT.IIDX) == 1){ // this will acknowledge
    GPIOB->DOUTTGL31_0 = GREEN; // toggle PB27 (minimally intrusive debugging)
    GPIOB->DOUTTGL31_0 = GREEN; // toggle PB27 (minimally intrusive debugging)
// game engine goes here
    // 1) sample slide pot
    // 2) read input switches
    // 3) move sprites
    // 4) start sounds
    // 5) set semaphore
    // NO LCD OUTPUT IN INTERRUPT SERVICE ROUTINES
    GPIOB->DOUTTGL31_0 = GREEN; // toggle PB27 (minimally intrusive debugging)
  }
}
uint8_t TExaS_LaunchPadLogicPB27PB26(void){
  return (0x80|((GPIOB->DOUT31_0>>26)&0x03));
}

typedef enum {English, Spanish, Portuguese, French} Language_t;
Language_t myLanguage=English;
typedef enum {HELLO, GOODBYE, LANGUAGE} phrase_t;
const char Hello_English[] ="Hello";
const char Hello_Spanish[] ="\xADHola!";
const char Hello_Portuguese[] = "Ol\xA0";
const char Hello_French[] ="All\x83";
const char Goodbye_English[]="Goodbye";
const char Goodbye_Spanish[]="Adi\xA2s";
const char Goodbye_Portuguese[] = "Tchau";
const char Goodbye_French[] = "Au revoir";
const char Language_English[]="English";
const char Language_Spanish[]="Espa\xA4ol";
const char Language_Portuguese[]="Portugu\x88s";
const char Language_French[]="Fran\x87" "ais";
const char *Phrases[3][4]={
  {Hello_English,Hello_Spanish,Hello_Portuguese,Hello_French},
  {Goodbye_English,Goodbye_Spanish,Goodbye_Portuguese,Goodbye_French},
  {Language_English,Language_Spanish,Language_Portuguese,Language_French}
};
// use main1 to observe special characters
int main1(void){ // main1
    char l;
  __disable_irq();
  PLL_Init(); // set bus speed
  LaunchPad_Init();
  ST7735_InitPrintf();
  ST7735_FillScreen(0x0000);            // set screen to black
  for(phrase_t myPhrase=HELLO; myPhrase<= GOODBYE; myPhrase++){
    for(Language_t myL=English; myL<= French; myL++){
         ST7735_OutString((char *)Phrases[LANGUAGE][myL]);
      ST7735_OutChar(' ');
         ST7735_OutString((char *)Phrases[myPhrase][myL]);
      ST7735_OutChar(13);
    }
  }
  Clock_Delay1ms(3000);
  ST7735_FillScreen(0x0000);       // set screen to black
  l = 128;
  while(1){
    Clock_Delay1ms(2000);
    for(int j=0; j < 3; j++){
      for(int i=0;i<16;i++){
        ST7735_SetCursor(7*j+0,i);
        ST7735_OutUDec(l);
        ST7735_OutChar(' ');
        ST7735_OutChar(' ');
        ST7735_SetCursor(7*j+4,i);
        ST7735_OutChar(l);
        l++;
      }
    }
  }
}

// use main2 to observe graphics
int main2(void){ // main2
  __disable_irq();
  PLL_Init(); // set bus speed
  LaunchPad_Init();
  ST7735_InitPrintf();
    //note: if you colors are weird, see different options for
    // ST7735_InitR(INITR_REDTAB); inside ST7735_InitPrintf()
  ST7735_FillScreen(ST7735_BLACK);
//  ST7735_DrawBitmap(4,158,red_zero_noBG , 25,35);
  ST7735_DrawBitmap(4,50,not_2 , 25,35);
  ST7735_DrawBitmap(33,50,not_4 , 25,35);
  ST7735_DrawBitmap(62,50,not_7 , 25,35);
  ST7735_DrawBitmap(91,50,not_5 , 25,35);

  for(int16_t height=158; height != 48; height--){
      ST7735_DrawBitmap(4,height,not_8 , 25,35);
      ST7735_DrawBitmap(4,height+1,BlackLine , 25,1);

      ST7735_DrawBitmap(33,height,not_6 , 25,35);
      ST7735_DrawBitmap(33,height+1,BlackLine , 25,1);

      ST7735_DrawBitmap(62,height,not_1 , 25,35);
      ST7735_DrawBitmap(62,height+1,BlackLine , 25,1);

      ST7735_DrawBitmap(91,height,not_0 , 25,35);
      ST7735_DrawBitmap(91,height+1,BlackLine , 25,1);

      Clock_Delay(2666667);

  }
//
//  for(int16_t height=158; height != 50; height--){
//      ST7735_DrawBitmap(3,height,red_zero_BG , 27,37);
//      ST7735_DrawBitmap(4,height+1,BlackLine , 25,1);
//      Clock_Delay(2666667);
//
//  }
  while(1){

  }

}

// use main3 to test switches and LEDs
int main3(void){ // main3
  __disable_irq();
  PLL_Init(); // set bus speed
  LaunchPad_Init();
  Switch_Init(); // initialize switches
  LED_Init(); // initialize LED
  while(1){
    // write code to test switches and LEDs
    
  }
}
// use main4 to test sound outputs
int main4(void){ uint32_t last=0,now;
  __disable_irq();
  PLL_Init(); // set bus speed
  LaunchPad_Init();
  Switch_Init(); // initialize switches
  LED_Init(); // initialize LED
  //Sound_Init(1,1);  // initialize sound
  TExaS_Init(ADC0,6,0); // ADC1 channel 6 is PB20, TExaS scope
  __enable_irq();
  while(1){
    now = Switch_In(); // one of your buttons
//    if((last == 0)&&(now == 1)){
//      Sound_CardDown(); // call one of your sounds
//    }
//    if((last == 0)&&(now == 2)){
//      Sound_CardDown(); // call one of your sounds
//    }
//    if((last == 0)&&(now == 4)){
//      Sound_CardDown(); // call one of your sounds
//    }
//    if((last == 0)&&(now == 8)){
//      Sound_CardDown(); // call one of your sounds
//    }
    // modify this to test all your sounds
  }
}
// ALL ST7735 OUTPUT MUST OCCUR IN MAIN
int main5(void){ // final main
  __disable_irq();
  PLL_Init(); // set bus speed
  LaunchPad_Init();
  ST7735_InitPrintf();
    //note: if you colors are weird, see different options for
    // ST7735_InitR(INITR_REDTAB); inside ST7735_InitPrintf()
  ST7735_FillScreen(ST7735_BLACK);
  ADCinit();     //PB18 = ADC1 channel 5, slidepot
  //Switch_Init(); // initialize switches
  //LED_Init();    // initialize LED
  //Sound_Init(1,1);  // initialize sound
  TExaS_Init(0,0,&TExaS_LaunchPadLogicPB27PB26); // PB27 and PB26
    // initialize interrupts on TimerG12 at 30 Hz
  TimerG12_IntArm(80000000/30,2);
  // initialize all data structures
  __enable_irq();

  while(1){
    // wait for semaphore
       // clear semaphore


      // update ST7735R
    // check for end game or level switch
  }
}








// Function Definitions -

void discard(list_node_t* removed_node){
    if(removed_node->card_pointer->in_deck == user){
        list_remove(&User_List,removed_node); // Remove From User's Hand
    }
    if(removed_node->card_pointer->in_deck == opp){
        list_remove(&Opp_List,removed_node); // Remove From Opponent's Hand
    }
    removed_node->card_pointer->in_deck= dis; // Symbolizes Discarded

    list_add(&Deck_List,removed_node); // Adding to the Back of the Deck (Where Discards are held)
}

void draw(list_t* player_hand, list_node_t* card_node){
    if(player_hand->id == user){
        card_node->card_pointer->in_deck= user ; // Sent to User's Hand
    }
    if(player_hand->id == opp){
            card_node->card_pointer->in_deck= opp; // Sent to Opponent's Hand
        }
    list_remove(&Deck_List,card_node); // Removes Card From Deck
    list_add(player_hand,card_node); // Adds Card to Player Hand
}


void game_init(void){
    list_init(&Deck_List);
    list_init(&User_List);
    list_init(&Opp_List);
    uint8_t index=0;
    for(uint8_t color=0; color<= 3 ; color++){
        for(uint8_t value=0; value<=9; value++){

            Cards[index].value= value; // Init Card
            Cards[index].color = color;
            Cards[index].in_deck = deck;
            Cards[index].power = 0;
            Cards[index].global_index = index;
            ListNodes[index].card_pointer = &Cards[index]; // Init Node
            list_add(&Deck_List, &ListNodes[index]); // Add to Deck
            index++;

            Cards[index].value= value; // Init Card
            Cards[index].color = color;
            Cards[index].in_deck = deck;
            Cards[index].power = 0;
            Cards[index].global_index = index;
            ListNodes[index].card_pointer = &Cards[index]; // Init Node
            list_add(&Deck_List, &ListNodes[index]); // Add to Deck
            index++;
        }
        Cards[index].value= 10; // Skip
        Cards[index].color = color;
        Cards[index].in_deck = deck;
        Cards[index].power = 1;
        Cards[index].global_index = index;
        ListNodes[index].card_pointer = &Cards[index];
        list_add(&Deck_List, &ListNodes[index]);
        index++;

        Cards[index].value= 10; // Skip
        Cards[index].color = color;
        Cards[index].in_deck = deck;
        Cards[index].power = 1;
        Cards[index].global_index = index;
        ListNodes[index].card_pointer = &Cards[index];
        list_add(&Deck_List, &ListNodes[index]);
        index++;

        Cards[index].value= 11; // Reverse
        Cards[index].color = color;
        Cards[index].in_deck = deck;
        Cards[index].power = 1;
        Cards[index].global_index = index;
        ListNodes[index].card_pointer = &Cards[index]; // Init Node
        list_add(&Deck_List, &ListNodes[index]);
        index++;

        Cards[index].value= 11; // Reverse
        Cards[index].color = color;
        Cards[index].in_deck = deck;
        Cards[index].power = 1;
        Cards[index].global_index = index;
        ListNodes[index].card_pointer = &Cards[index]; // Init Node
        list_add(&Deck_List, &ListNodes[index]);
        index++;

        Cards[index].value= 12; // +2
        Cards[index].color = color;
        Cards[index].in_deck = deck;
        Cards[index].power = 2;
        Cards[index].global_index = index;
        ListNodes[index].card_pointer = &Cards[index]; // Init Node
        list_add(&Deck_List, &ListNodes[index]);
        index++;

        Cards[index].value= 12; // +2
        Cards[index].color = color;
        Cards[index].in_deck = deck;
        Cards[index].power = 2;
        Cards[index].global_index = index;
        ListNodes[index].card_pointer = &Cards[index]; // Init Node
        list_add(&Deck_List, &ListNodes[index]);
        index++;
    }

    for(uint32_t increment=0; increment<4; increment++){
        Cards[index].value= 13; // Wild
        Cards[index].color = wild_color;
        Cards[index].in_deck = deck;
        Cards[index].power = 3;
        Cards[index].global_index = index;
        ListNodes[index].card_pointer = &Cards[index]; // Init Node
        list_add(&Deck_List, &ListNodes[index]);
        index++;

        Cards[index].value= 13; // Wild +4
        Cards[index].color = wild_color;
        Cards[index].in_deck = deck;
        Cards[index].power = 4;
        Cards[index].global_index = index;
        ListNodes[index].card_pointer = &Cards[index]; // Init Node
        list_add(&Deck_List, &ListNodes[index]);
        index++;
    }


}


void draw_seven(void){ // This command assumes that this computer has priority in the reset - Should be only called by one computer
    uint32_t randomindex;
    list_node_t* card_node;
    uint32_t test=0;
    for(uint32_t counter=0; counter<7; counter++){


         //Draw for User

         randomindex = random_index();        // 0 <= randomindex <= Deck_List.length - 1
         card_node = traverse_index(&Deck_List, randomindex);
         draw(&User_List, card_node); // Place one random card into the user's hand
         UART1_OutChar(0x81);
         UART1_OutChar(card_node->card_pointer->global_index); //Output to UART

         Clock_Delay(100); // Don't over fill FIFOs


         //Draw for Opponent

         randomindex = random_index();        // 0 <= random_index <= Deck_List.length - 1
         card_node = traverse_index(&Deck_List, randomindex);
         draw(&Opp_List, card_node); // Place one random card into the user's hand
         UART1_OutChar(0x82);
         UART1_OutChar(card_node->card_pointer->global_index); //Output to UART

         Clock_Delay(100); // Don't over fill FIFOs

         // Wait bus cycles


    }
    // Removing a card from deck to be starter card (has to be a number)
    do{
        randomindex = random_index();
        card_node = traverse_index(&Deck_List, randomindex);
    }
    while(card_node->card_pointer->value > 9);

    UART1_OutChar(0x80);
    UART1_OutChar(card_node->card_pointer->global_index); //Output to UART

    Play_Color = card_node->card_pointer->color;
    Play_Value = card_node->card_pointer->value;
    card_node->card_pointer->in_deck = dis;


    list_remove(&Deck_List,card_node);
    list_add(&Deck_List,card_node);

}

uint32_t random_index(void){
    if (Deck_List.length == 0) {
        return 0;
    }
    static uint32_t seed=0;
    if(seed==0){
        seed = ADCin()+1;
    }
    seed = 1664525*seed+1013904223;
    return (seed>>16)%Deck_List.length;

}

list_node_t* traverse_index(list_t* deck, uint32_t index){
    uint32_t fail=0;
    list_node_t* node_pointer = deck->head;

    while(index != 0){
        if(node_pointer == Deck_List.tail){
            fail++;
        }
        node_pointer = list_traverse(node_pointer);
        index--;
    }
    return node_pointer;
}






int main6(void){ // Main 6 Testing game_init
    PLL_Init(); // set bus speed
    LaunchPad_Init();
    game_init();
    list_node_t* node;
    uint8_t card_value;
    uint8_t card_color;
    while(1){
        node= Deck_List.head;
        for(uint32_t index=0; index<112; index++){
            card_value = node->card_pointer->value;
            card_color = node->card_pointer->color;
            node = list_traverse(node);
        }
    }
}



int main7(void){ // Main 7 Testing Random Index
    PLL_Init(); // set bus speed
    LaunchPad_Init();
    ADCinit();
    game_init();
    uint32_t output1=0;
    while(1){
        if (Deck_List.length < 5){
            Deck_List.length = 112;
        }
        output1 = random_index();
        Deck_List.length--;
    }


}

int main8(void){ // Main 8 Testing Draw 7
    PLL_Init(); // set bus speed
    LaunchPad_Init();
    ADCinit();
    game_init();
    draw_seven();
    while(1){

    }
}


int main9(void){ // Main 9 Testing traverse
    PLL_Init(); // set bus speed
    LaunchPad_Init();
    ADCinit();
    game_init();
    uint32_t distance;
    list_node_t* output;
    while(1){
        distance=0;
        for(uint32_t cycle=0; cycle<112; cycle++){
            output = traverse_index(&Deck_List, cycle);
            distance++;
        }
    }

}


int main(void){ // Main 10 Testing - Add this to
    PLL_Init(); // set bus speed
    LaunchPad_Init();
    ADCinit();
    ST7735_InitPrintf();
    ST7735_FillScreen(ST7735_BLACK);
    game_init();
    list_node_t* node_pointer;
    uint32_t randindex;
    for(uint32_t counter=0; counter < 7; counter++){ // For Draw 7 command we are expecting 15 cards total - 7 for this user, 7 for opponent and 1 play card
        randindex = random_index();
        node_pointer = traverse_index(&Deck_List, randindex);
        Fifo1_Put(0x81);
        Fifo1_Put(node_pointer->card_pointer->global_index);
        read_input();


        randindex = random_index();
        node_pointer = traverse_index(&Deck_List, randindex);
        Fifo1_Put(0x82);
        Fifo1_Put(node_pointer->card_pointer->global_index);
        read_input();
        }
     randindex = random_index();
     node_pointer = traverse_index(&Deck_List, randindex);
     Fifo1_Put(0x80);
     Fifo1_Put(node_pointer->card_pointer->global_index);
     read_input();


     update_pages();
     display_hand();
     while(1){

     }

}


int main11(void){ // Main 11 Trying to test display hand
    __disable_irq();

    PLL_Init(); // set bus speed
    LaunchPad_Init();
    ST7735_InitPrintf();
    //note: if you colors are weird, see different options for
    // ST7735_InitR(INITR_REDTAB); inside ST7735_InitPrintf()
    ST7735_FillScreen(ST7735_BLACK);
    ADCinit();
    game_init();
    list_node_t* node;
    node = traverse_index(&Deck_List, 0);
    draw(&User_List,node);

    node->card_pointer->page = 0;
    node->card_pointer->position=0;
    display_card(node->card_pointer);
//    ST7735_DrawBitmap(4,158,not_2, 25,35);

    while(1){

    }
}


void read_input(void){ // Need to add in while loop to wait for fifo to be full
    static uint8_t lostchar = 0;
    uint8_t input; // This will be the instruction then the data
    list_node_t* temp_node;

    input = Fifo1_Get(); // Instruction
    if((input & 0x80) == 0){
        lostchar = input;
        Error=1;
        return;
    }
    else{
        input = input & 0x7F;
    }
    if(input==0){
        input = Fifo1_Get();
        Play_Color = Cards[input].color;
        Play_Value = Cards[input].value;
        Cards[input].in_deck = dis;
        temp_node = &ListNodes[input];
        list_remove(&Deck_List,temp_node); // Removes Card From Deck
        list_add(&Deck_List,temp_node); // Adds Card to Player Hand
    }
    else if(input == 1){
        input = Fifo1_Get();
        temp_node = &ListNodes[input];
        draw(&Opp_List, temp_node);

    }
    else if(input == 2){
        input = Fifo1_Get();
        temp_node = &ListNodes[input];
        draw(&User_List, temp_node);

    }
}

void update_pages(void){
    list_node_t* node_pointer= User_List.head;
    for(uint32_t index=0; index < User_List.length; index++){
        node_pointer->card_pointer->page = index/4;
        node_pointer->card_pointer->position = index%4;
        node_pointer = node_pointer->next;
    }
}

void display_hand(void){
    list_node_t* node_pointer= User_List.head;
    for(uint32_t index=0; index < User_List.length; index++){
        if(node_pointer->card_pointer->page){
            display_card(node_pointer->card_pointer);

        }
        node_pointer = node_pointer->next;
    }
}










void display_card(card_t* card){

    static short x_values[4]={4,34,64,94};
    static uint16_t colors[4]={0xF7C8,0xE920,0x03FF,0xFC9F};
    static uint16_t image[875];
    uint16_t* mask_array=mask[card->value];
    short x = x_values[card->position];
    uint16_t color = colors[card->color];
    if(card->value == 13){
        if(card->power == change_color){
        ST7735_DrawBitmap(x_values[card->position],158,wildimage, 25,35);
        }
        else{
        ST7735_DrawBitmap(x_values[card->position],158,wild4image, 25,35);
        }
    }
    else{
        for(uint32_t index=0; index<875;index++){
            image[index] = ~(mask_array[index] & color);
        }
        ST7735_DrawBitmap(x_values[card->position],158,image,25,35);
    }
    Clock_Delay(2666667);
}

